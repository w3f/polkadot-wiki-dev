"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[660],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),l=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(a),m=n,u=d["".concat(c,".").concat(m)]||d[m]||h[m]||i;return a?r.createElement(u,o(o({ref:t},p),{},{components:a})):r.createElement(u,o({ref:t},p))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},93487:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=a(87462),n=a(63366),i=(a(67294),a(3905)),o=["components"],s={id:"learn-guides-coretime-parachains",title:"Agile Coretime for Parachains",sidebar_label:"Coretime for Parachains",description:"Agile Coretime from Parachains perspective",keywords:["coretime","blockspace","parathread","parachain","cores"],slug:"../learn-guides-coretime-parachains"},c=void 0,l={unversionedId:"learn/learn-guides-coretime-parachains",id:"learn/learn-guides-coretime-parachains",title:"Agile Coretime for Parachains",description:"Agile Coretime from Parachains perspective",source:"@site/../docs/learn/learn-guides-coretime-parachains.md",sourceDirName:"learn",slug:"/learn-guides-coretime-parachains",permalink:"/docs/learn-guides-coretime-parachains",draft:!1,editUrl:"https://github.com/w3f/polkadot-wiki/edit/master/docs/learn/learn-guides-coretime-parachains.md",tags:[],version:"current",lastUpdatedBy:"Radha",lastUpdatedAt:1713339839,formattedLastUpdatedAt:"Apr 17, 2024",frontMatter:{id:"learn-guides-coretime-parachains",title:"Agile Coretime for Parachains",sidebar_label:"Coretime for Parachains",description:"Agile Coretime from Parachains perspective",keywords:["coretime","blockspace","parathread","parachain","cores"],slug:"../learn-guides-coretime-parachains"},sidebar:"docs",previous:{title:"Coretime Marketplaces",permalink:"/docs/learn-guides-coretime-marketplaces"},next:{title:"Bridges",permalink:"/docs/learn-bridges"}},p={},d=[{value:"Run a Parachain with Bulk Coretime",id:"run-a-parachain-with-bulk-coretime",level:2},{value:"Run a Parachain with On-demand Coretime",id:"run-a-parachain-with-on-demand-coretime",level:2}],h={toc:d},m="wrapper";function u(e){var t=e.components,s=(0,n.Z)(e,o);return(0,i.kt)(m,(0,r.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The landscape for parachains on Polkadot\nchanges with the rollout of ",(0,i.kt)("a",{parentName:"p",href:"/docs/learn-agile-coretime"},"Agile Coretime"),". With\n",(0,i.kt)("a",{parentName:"p",href:"/docs/learn-auction"},"auctions")," being phased out in favor of direct coretime sales, the existing\nparachains on the relaychain and the prospective parachains are presented with the following\nscenarios:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Migrating from a legacy lease into a bulk coretime model"),(0,i.kt)("li",{parentName:"ul"},"Starting with bulk coretime model from scratch"),(0,i.kt)("li",{parentName:"ul"},"Running a parachain with on-demand coretime purchases")),(0,i.kt)("p",null,"The parachain lease auctions will stop on-chain with the enactment of the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/polkadot-fellows/runtimes/releases/tag/v1.2.0"},"runtime upgrade 1.2.0")," and the\nexisting leases will be migrated to bulk coretime automatically. Leases that are yet to be started\nwill be cancelled and the locked DOT",(0,i.kt)("br",{parentName:"p"}),"\n","will be refunded. The existing parachains benefit from\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.lastic.xyz/coretime/renewals.html"},"coretime renewals")," which allows for the continued\nassignment of bulk coretime for a core without going through the regular purchasing process."),(0,i.kt)("p",null,"For the tutorials below,\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/polkadot-sdk/tree/6f3d890ed35bfdee3e3f7d59018345635a62d1cd/polkadot/parachain/test-parachains/adder"},"the adder test parachain"),"\non Polkadot-SDK has been used. To compile the ",(0,i.kt)("inlineCode",{parentName:"p"},"adder-collator"),", run the command below in the\nPolkadot-SDK repository."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\ncargo build -r -p test-parachain-adder-collator\n\n")),(0,i.kt)("p",null,"After the test parachain collator node is successfully compiled, export its genesis state and the\ncode by using the following commands. If the export is successful, these two files should show up in\nthe Polkadot-SDK repository."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\n./target/release/adder-collator export-genesis-state genesis\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\n./target/release/adder-collator export-genesis-wasm genesis-wasm\n\n")),(0,i.kt)("h2",{id:"run-a-parachain-with-bulk-coretime"},"Run a Parachain with Bulk Coretime"),(0,i.kt)("p",null,"The first step is to register a ",(0,i.kt)("inlineCode",{parentName:"p"},"ParaID"),"for the on-demand parachain. This can be done through\nPolkadot-JS UI by navigating to Network > Parachains > Parathreads and clicking on ParaID button.\nEnsure that you have sufficient tokens to successfully reserve the displayed ",(0,i.kt)("inlineCode",{parentName:"p"},"ParaID")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"coretime-reserve-paraID",src:a(56770).Z,width:"2161",height:"713"})),(0,i.kt)("p",null,"The next step is to register the parachain's genesis wasm and state."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"coretime-register-parathread",src:a(13670).Z,width:"2136",height:"977"})),(0,i.kt)("p",null,"After successful registration, the parachain starts onboarding as a parathread."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"coretime-onboarding-parathread",src:a(83177).Z,width:"2873",height:"352"})),(0,i.kt)("p",null,"While the parachain is onboarding, start syncing the collator using the following command to rapidly\nsync with the specified relaychain."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\n./target/release/adder-collator --parachain-id= $ParaID --chain=rococo --sync fast-unsafe\n\n")),(0,i.kt)("p",null,"Now, you can purchase bulk coretime on ",(0,i.kt)("a",{parentName:"p",href:"/docs/learn-guides-coretime-marketplaces"},"Coretime chain")," and\nassign the purchased core to the registered ",(0,i.kt)("inlineCode",{parentName:"p"},"ParaID"),". The snapshot below is from\n",(0,i.kt)("a",{parentName:"p",href:"https://test.lastic.xyz/"},"Lastic")," interface."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"coretime-bulk-assign-lastic",src:a(17765).Z,width:"1322",height:"1033"})),(0,i.kt)("p",null,"After successful assignment of the core, the ",(0,i.kt)("inlineCode",{parentName:"p"},"adder-collator")," logs show new collations at regular\nintervals, gradually incrementing the state by ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"coretime-collation-bulk",src:a(49799).Z,width:"1777",height:"696"})),(0,i.kt)("h2",{id:"run-a-parachain-with-on-demand-coretime"},"Run a Parachain with On-demand Coretime"),(0,i.kt)("p",null,"The first step is to register a ",(0,i.kt)("inlineCode",{parentName:"p"},"ParaID"),"for the on-demand parachain. This can be done through\nPolkadot-JS UI by navigating to Network > Parachains > Parathreads and clicking on ParaID button.\nEnsure that you have sufficient tokens to successfully reserve the displayed ",(0,i.kt)("inlineCode",{parentName:"p"},"ParaID")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"coretime-reserve-paraID",src:a(56770).Z,width:"2161",height:"713"})),(0,i.kt)("p",null,"The next step is to register the parachain's genesis wasm and state."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"coretime-register-parathread",src:a(13670).Z,width:"2136",height:"977"})),(0,i.kt)("p",null,"After successful registration, the parachain starts onboarding as a parathread."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"coretime-onboarding-parathread",src:a(83177).Z,width:"2873",height:"352"})),(0,i.kt)("p",null,"While the parachain is onboarding, start syncing the collator using the following command to rapidly\nsync with the specified relaychain."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\n./target/release/adder-collator --parachain-id= $ParaID --chain=rococo --sync fast-unsafe\n\n")),(0,i.kt)("p",null,"After the collator node is fully synced with the relay chain, navigate to Developer > Extrinsics and\nissue ",(0,i.kt)("inlineCode",{parentName:"p"},"onDemandAssignmentProvider.placeOrderAllowDeath")," extrinsic from the account that registered\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"ParaID")," by specifying sufficient ",(0,i.kt)("inlineCode",{parentName:"p"},"maxAmount"),"for the transaction to go through successfully."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"coretime-ondemand-assignment",src:a(11075).Z,width:"2873",height:"1394"})),(0,i.kt)("p",null,"With each successful on-demand extrinsic, the parachain head changes (you may have to zoom out on\nthe browser for parachain head details to show up on Polkadot-JS UI)."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"coretime-ondemand-parahead",src:a(8486).Z,width:"1435",height:"319"})),(0,i.kt)("p",null,"The successful collation can also be verified in the logs of the parachain collator. It can be\nnoticed that with each parachain block, the state of ",(0,i.kt)("inlineCode",{parentName:"p"},"adder-collator")," is incremented by ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"coretime-new-collation",src:a(70567).Z,width:"1782",height:"426"})))}u.isMDXComponent=!0},49799:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/coretime-collation-bulk-d6f817e5970e0194d4d5a3dfe70959b7.png"},70567:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/coretime-create-new-collation-7da7b7b28f77f12a731dc4d84baf2e38.png"},11075:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/coretime-on-demand-assignment-098632f2c2246a688ffb1405c12e87b5.png"},8486:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/coretime-on-demand-parahead-36a2079a7b6575851931724c54415a4d.png"},83177:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/coretime-parachain-onboarding-9d96e69f180f0a932f526855ef990f73.png"},13670:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/coretime-register-parathread-c49534aa188c71fcb462ba7ded9014ce.png"},56770:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/coretime-reserve-paraID-59fe64fdbcc55e6029182070bf3d416d.png"},17765:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/lastic-assign-core-bf4ebbb0f6bf5633a10a17c08f22cd79.png"}}]);