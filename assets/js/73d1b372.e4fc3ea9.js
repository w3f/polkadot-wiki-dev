"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3576],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>u});var n=i(67294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(i),h=r,u=m["".concat(s,".").concat(h)]||m[h]||p[h]||a;return i?n.createElement(u,o(o({ref:t},d),{},{components:i})):n.createElement(u,o({ref:t},d))}));function u(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,o=new Array(a);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=i[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}h.displayName="MDXCreateElement"},93891:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>m});var n=i(87462),r=i(63366),a=(i(67294),i(3905)),o=["components"],l={id:"learn-agile-coretime",title:"Agile Coretime",sidebar_label:"Agile Coretime",description:"Introduction to Agile Coretime and its terminology",keywords:["coretime","blockspace","parathread","parachain","cores"],slug:"../learn-agile-coretime"},s=void 0,c={unversionedId:"learn/learn-agile-coretime",id:"learn/learn-agile-coretime",title:"Agile Coretime",description:"Introduction to Agile Coretime and its terminology",source:"@site/../docs/learn/learn-agile-coretime.md",sourceDirName:"learn",slug:"/learn-agile-coretime",permalink:"/docs/learn-agile-coretime",draft:!1,editUrl:"https://github.com/w3f/polkadot-wiki/edit/master/docs/learn/learn-agile-coretime.md",tags:[],version:"current",lastUpdatedBy:"Radha",lastUpdatedAt:1709201664,formattedLastUpdatedAt:"Feb 29, 2024",frontMatter:{id:"learn-agile-coretime",title:"Agile Coretime",sidebar_label:"Agile Coretime",description:"Introduction to Agile Coretime and its terminology",keywords:["coretime","blockspace","parathread","parachain","cores"],slug:"../learn-agile-coretime"},sidebar:"docs",previous:{title:"Agile Coretime",permalink:"/docs/learn-agile-coretime-index"},next:{title:"Bridges",permalink:"/docs/learn-bridges"}},d={},m=[{value:"Agile Coretime Terminology",id:"agile-coretime-terminology",level:2},{value:"Core",id:"core",level:3},{value:"Coretime",id:"coretime",level:3},{value:"Bulk Coretime",id:"bulk-coretime",level:3},{value:"Region",id:"region",level:3},{value:"On-demand Coretime",id:"on-demand-coretime",level:3},{value:"On-demand Coretime Pool",id:"on-demand-coretime-pool",level:3},{value:"Coretime Chain",id:"coretime-chain",level:3},{value:"Timeslice",id:"timeslice",level:3},{value:"Task",id:"task",level:3},{value:"Agile Coretime Implementation",id:"agile-coretime-implementation",level:2},{value:"Coretime Sales",id:"coretime-sales",level:3},{value:"Splitting and Interlacing",id:"splitting-and-interlacing",level:3},{value:"Elastic Scaling",id:"elastic-scaling",level:3}],p={toc:m},h="wrapper";function u(e){var t=e.components,l=(0,r.Z)(e,o);return(0,a.kt)(h,(0,n.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Agile Coretime enables efficient utilization of Polkadot network resources and provides\neconomic flexibility for builders, generalizing Polkadot beyond what was initially proposed\nand envisioned in its ",(0,a.kt)("a",{parentName:"p",href:"https://polkadot.network/whitepaper/"},"whitepaper"),". "),(0,a.kt)("p",null,"In Polkadot 1.0, the only way for a parachain to be secured by Polkadot was to rent a lease\nthrough an auction, which guaranteed parachain block validation for up-to two years. This involved\nlocking significant amount of DOT, leading to a high barrier of entry for small and medium scale\nblockchain projects. The parachains produced blocks at a regular interval of 12 seconds,\nirrespective of the network activity. This led to inefficient resource allocation and misplaced\neconomic incentives while producing almost empty blocks under lighter traffic and being unable to\naccommodate heavier traffic when it exceeded block limits. Agile Coretime resolves all of these\ndrawbacks. "),(0,a.kt)("p",null,"The figure below shows the core usage for Polkadot 1.0, where the horizontal axis is time, and each\nrow represents a core. Colors show different parachains, each using one core (i.e., one parachain,\none core)."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"core-usage-dumb",src:i(42030).Z,width:"1920",height:"800"})),(0,a.kt)("p",null,"Agile Coretime allows for the purchase of ",(0,a.kt)("a",{parentName:"p",href:"#coretime"},"coretime")," in \u201cbulk\u201d with an allocation for\none month. Heavy duty parachains which need to author a block every 12\nseconds (or every 6s through ",(0,a.kt)("a",{parentName:"p",href:"/docs/learn-async-backing"},"Async Backing"),"), can seamlessly \u201crenew\u201d the ",(0,a.kt)("a",{parentName:"p",href:"#core"},"core")," each month.\nCoretime renewal orders take precedence over new orders and provide protection against price\nfluctuations, allowing parachains to plan their project budget and costs more effectively."),(0,a.kt)("p",null,"The purchased coretime can also be split up and sold in parts, down to a single\nblock per month, allowing for secondary markets to thrive and improve the allocation efficiency\nof coretime. Furthermore, Agile Coretime offers ",(0,a.kt)("a",{parentName:"p",href:"#on-demand-coretime"},"on-demand coretime"),"\nfunctionality that enables the authoring of a parachain block on-demand."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"core-usage-agile-rangeSplit",src:i(4544).Z,width:"1920",height:"800"})),(0,a.kt)("admonition",{title:"Agile Coretime is under active development",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The progress of Agile Coretime development can be tracked ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/orgs/paritytech/projects/119/views/20"},"here."))),(0,a.kt)("h2",{id:"agile-coretime-terminology"},"Agile Coretime Terminology"),(0,a.kt)("h3",{id:"core"},"Core"),(0,a.kt)("p",null,'The term "Core" captures the virtual abstraction of computational resources provided by\nthe relay chain to secure the blocks of a parachain, which involves a randomized set of the\nrelay chain validators.'),(0,a.kt)("h3",{id:"coretime"},"Coretime"),(0,a.kt)("p",null,"The time allocated for utilizing a core, measured in relay chain blocks. "),(0,a.kt)("h3",{id:"bulk-coretime"},"Bulk Coretime"),(0,a.kt)("p",null,"A fixed duration of continuous coretime represented by an NFT that can be split,\nshared, or resold. Currently, the duration of bulk coretime is set to 28 days."),(0,a.kt)("h3",{id:"region"},"Region"),(0,a.kt)("p",null,"The NFT representing a single unit of bulk coretime."),(0,a.kt)("h3",{id:"on-demand-coretime"},"On-demand Coretime"),(0,a.kt)("p",null,"Previously known as instantaneous coretime, the on-demand coretime refers to coretime acquired\nthrough bidding in near real-time for the validation of a single parachain block on one of the\ncores reserved specifically for on-demand orders."),(0,a.kt)("h3",{id:"on-demand-coretime-pool"},"On-demand Coretime Pool"),(0,a.kt)("p",null,"Set of cores that are available on-demand. Cores reserved through bulk coretime could also be\nmade available in the on-demand coretime pool, in parts or in entirety."),(0,a.kt)("h3",{id:"coretime-chain"},"Coretime Chain"),(0,a.kt)("p",null,"A system parachain that is responsible for the sale, manipulation of bulk coretime and\neventually the purchase of on-demand coretime credits. It is also responsible for\nscheduling the respective cores on the relay chain to the parachains."),(0,a.kt)("h3",{id:"timeslice"},"Timeslice"),(0,a.kt)("p",null,"A timeslice represents the granularity the Coretime Chain schedules cores on the Relay Chain.\nThe Coretime Chain announces a schedule for each core, comprising the next 80 relay\nchain blocks in advance. The region length of 28 days corresponds to 5,040 timeslices."),(0,a.kt)("h3",{id:"task"},"Task"),(0,a.kt)("p",null,'The term "Task" captures the abstraction of utility of the core. Tasks on the cores\nare not just limited to securing parachains.'),(0,a.kt)("h2",{id:"agile-coretime-implementation"},"Agile Coretime Implementation"),(0,a.kt)("p",null,"Coretime is managed through the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/polkadot-sdk/blob/eefd5fe4499515da66d088505093f75b5aa22550/substrate/frame/broker/src/lib.rs"},"broker pallet"),"\nwhich is deployed on the Coretime Chain. In theory, the Polkadot Relay Chain can support around a\nhundred cores seamlessly and can support over a few hundred cores through optimizations. Preliminary tests ran successfully with 80 cores with 12-second block times."),(0,a.kt)("h3",{id:"coretime-sales"},"Coretime Sales"),(0,a.kt)("p",null,"Sales on the Coretime Chain are of ",(0,a.kt)("inlineCode",{parentName:"p"},"timeslice")," length. These sales are divided into two main periods: the Renewal period and the Sale period."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"coretime-sale-timeline",src:i(19908).Z,width:"2000",height:"1015"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Renewal periods are of ",(0,a.kt)("inlineCode",{parentName:"li"},"interlude_length")," blocks long, and it\u2019s where bulk coretime can be renewed."),(0,a.kt)("li",{parentName:"ul"},"Sale periods are as well divided into two periods: a Price Discovery period and a Fixed Price period. After the Renewal period, a new ",(0,a.kt)("inlineCode",{parentName:"li"},"start_price")," will be set by the Coretime Chain and a dutch auction of ",(0,a.kt)("inlineCode",{parentName:"li"},"leading_length")," blocks will start, putting downward pressure on price to find the right equilibrium. This process will set the ",(0,a.kt)("inlineCode",{parentName:"li"},"regular_price")," which will be the one offered at the Fixed Price period.")),(0,a.kt)("p",null,"This discussion on initial coretime pricing can be viewed ",(0,a.kt)("a",{parentName:"p",href:"https://forum.polkadot.network/t/initial-coretime-pricing/5187"},"here")),(0,a.kt)("h3",{id:"splitting-and-interlacing"},"Splitting and Interlacing"),(0,a.kt)("p",null,"Splitting and interlacing are actions that can be performed within a region. Performing either of\nthese actions makes you lose the right to a price-capped renewal."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Splitting"),": the action of dividing a region into several regions with different start and end\ntimeslices."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Interlacing:")," the action of dividing a region into the execution of different tasks for each\nblock of a timeslice. The result regions will have the same start and end timeslice as the parent\nregion, but different tasks will be executed at different blocks.")),(0,a.kt)("h3",{id:"elastic-scaling"},"Elastic Scaling"),(0,a.kt)("p",null,"With elastic scaling (still under development) projects can scale seamlessly and without being\nlimited to previously allocated resources. Elastic scaling is the process of getting multiple cores\nfor one task. This allows parachains to include more blocks per unit time (Relay Chain-side), and\nproduce more blocks per unit time (async backing on the parachain side). Elastic scaling can be\npaired with on-demand coretime to increase your bandwidth seamlessly."))}u.isMDXComponent=!0},4544:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/core-usage-agile-rangeSplit-d8511cbb8658052ac0a639bd6a722982.png"},42030:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/core-usage-dumb-6419ee60a3606e10d89a1c91dbf24e20.png"},19908:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/Coretime-Sale-Timeline-d621574ae5a430c8e80861693985631d.png"}}]);