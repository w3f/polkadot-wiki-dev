"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1592],{34687:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"learn/learn-guides-coretime-swap","title":"Coretime Lease Swap","description":"A guide to leverage the swap lease functionality for different parachains","source":"@site/../docs/learn/learn-guides-coretime-swap.md","sourceDirName":"learn","slug":"/learn-guides-coretime-swap","permalink":"/docs/learn-guides-coretime-swap","draft":false,"unlisted":false,"editUrl":"https://github.com/w3f/polkadot-wiki/edit/master/docs/learn/learn-guides-coretime-swap.md","tags":[],"version":"current","lastUpdatedBy":"github-actions[bot]","lastUpdatedAt":1730123236000,"frontMatter":{"id":"learn-guides-coretime-swap","title":"Coretime Lease Swap","sidebar_label":"Coretime Swap","description":"A guide to leverage the swap lease functionality for different parachains","keywords":["coretime","blockspace","parachain","cores","lease"],"slug":"../learn-guides-coretime-swap"},"sidebar":"docs","previous":{"title":"Troubleshooting FAQ","permalink":"/docs/build-guides-coretime-troubleshoot"},"next":{"title":"Polkadot Protocol Overview","permalink":"/docs/build-protocol-info"}}');var i=n(74848),o=n(28453);const r={id:"learn-guides-coretime-swap",title:"Coretime Lease Swap",sidebar_label:"Coretime Swap",description:"A guide to leverage the swap lease functionality for different parachains",keywords:["coretime","blockspace","parachain","cores","lease"],slug:"../learn-guides-coretime-swap"},s=void 0,c={},h=[{value:"Initiate Swap from the Parachain",id:"initiate-swap-from-the-parachain",level:2},{value:"Perform Swap on the Relay chain for an unlocked Parachain",id:"perform-swap-on-the-relay-chain-for-an-unlocked-parachain",level:2},{value:"Coretime Swap Prerequisites",id:"coretime-swap-prerequisites",level:2},{value:"Swap through an OnDemand Core",id:"swap-through-an-ondemand-core",level:3},{value:"Core Swap Execution Steps",id:"core-swap-execution-steps",level:3},{value:"Coretime Swap - Time for Effect",id:"coretime-swap---time-for-effect",level:3}];function l(e){const a={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.p,{children:"The following is a guide to leverage the swap functionality to change leases between different\nparaIDs. This allows parachain teams to swap existing leases."}),"\n",(0,i.jsxs)(a.p,{children:["Coretime swapping requires two chains to send a ",(0,i.jsx)(a.code,{children:"swap"})," instruction from an origin with Root\nprivileges. Depending on whether the parachain is locked or not, this can either be the manager\naccount of the parachain on the relay chain (if parachain is not locked), or the governance system\nin place for the parachain (can be sudo) if the parachain is locked."]}),"\n",(0,i.jsxs)(a.p,{children:["In order to check if a parachain is locked or not, teams need to query ",(0,i.jsx)(a.code,{children:"registrar.paras"})," with the\ncorresponding paraID on the relay chain. It's important to note that since\n",(0,i.jsx)(a.a,{href:"https://github.com/polkadot-fellows/RFCs/pull/14",children:"RFC #14"}),", if a parachain never produced a block\nthe it's by default unlocked."]}),"\n",(0,i.jsx)(a.h2,{id:"initiate-swap-from-the-parachain",children:"Initiate Swap from the Parachain"}),"\n",(0,i.jsxs)(a.p,{children:["To swap from a parachain, an XCM message needs to be sent from the parachain to the relay chain.\nThis XCM message must be a send instruction that wraps the ",(0,i.jsx)(a.code,{children:"registrar.swap"})," extrinsic that needs to\nbe executed on the relay chain."]}),"\n",(0,i.jsx)(a.p,{children:"Below, you can find an example hex encoded call for Composable Finance, assuming the team is still\noperating under SUDO."}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.a,{href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fcomposable-rpc.dwellir.com#/extrinsics/decode/0x0200290003010003140004000000000700e876481713000000000700e87648170006000700e40b540282380100284603e3070000320d0000140d01000001008d1f",children:"0x0200290003010003140004000000000700e876481713000000000700e87648170006000700e40b540282380100284603e3070000320d0000140d01000001008d1f"})}),"\n",(0,i.jsx)(a.p,{children:"As for weights (size and time), we use an overestimate compared with those returned by the Polkadot\nRelay Runtime API."}),"\n",(0,i.jsxs)(a.p,{children:["To check the exact weights, you can navigate to Polkadot JS UI > Developer > Runtime Calls and then\nselect ",(0,i.jsx)(a.code,{children:"transactionPaymentCallInfo"})," and ",(0,i.jsx)(a.code,{children:"queryCallInfo"})," and include the extrinsic being sent in the\n",(0,i.jsx)(a.code,{children:"send"})," instruction of the XCM message:\n",(0,i.jsx)(a.a,{href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frpc.ibp.network%2Fpolkadot#/extrinsics/decode/0x4603e3070000320d0000",children:"0x4603e3070000320d0000"})]}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"TX-payment-API-Lease-Swap",src:n(65066).A+"",width:"1962",height:"1165"})}),"\n",(0,i.jsx)(a.h2,{id:"perform-swap-on-the-relay-chain-for-an-unlocked-parachain",children:"Perform Swap on the Relay chain for an unlocked Parachain"}),"\n",(0,i.jsx)(a.p,{children:"In the case a parachain is unlocked, then the manager of the parachain on the relaychain must send\nthe extrinsic directly on the relaychain."}),"\n",(0,i.jsxs)(a.p,{children:["In the case of paraID 3378 wanting to swap with Composable Finance, the extrinsic to send from its\nmanager account ",(0,i.jsx)(a.code,{children:"13B8Tdhi4EuruwzVt3gdcTopXpqbUzmncutiQKKNbd8cpU91"})," is:"]}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.a,{href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frpc.ibp.network%2Fpolkadot#/extrinsics/decode/0x4603320d0000e3070000",children:"0x4603320d0000e3070000"})}),"\n",(0,i.jsx)(a.h2,{id:"coretime-swap-prerequisites",children:"Coretime Swap Prerequisites"}),"\n",(0,i.jsxs)(a.p,{children:["We need to ensure the parachains have a valid cores to execute the swap instruction. This can be\nachieved either by getting a core in bulk from the coretime system chain, or by leveraging the\nonDemand functionality on relay chain. Assuming that teams have a working parachain (with a valid\ncore) and a stalled parachain, the following instructions explain how to get a core ",(0,i.jsx)(a.code,{children:"onDemand"})," for\nthe stalled parachain."]}),"\n",(0,i.jsx)(a.h3,{id:"swap-through-an-ondemand-core",children:"Swap through an OnDemand Core"}),"\n",(0,i.jsxs)(a.p,{children:["This functionality exists on the relay chain and allows users to request for 1 block of validation\nof their parachain. In order to place an order for on demand, any account must call the\n",(0,i.jsx)(a.code,{children:"onDemand.placeOrderAllowDeath"})," extrinsic."]}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"onDemand-block-production",src:n(9621).A+"",width:"2017",height:"1045"})}),"\n",(0,i.jsx)(a.p,{children:"This extrinsic takes two parameters:"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsx)(a.p,{children:"Amount: the amount the user is willing to pay for the parachain block to be validated by a core.\nThe minimum amount the system allows is 250,000,000 planckDOT (0.025 DOT) and the actual amount is\ndynamic as it depends on the on-demand block production requests queued."}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:["paraID: This refers to the ",(0,i.jsx)(a.code,{children:"paraID"})," of the on-demand Parachain whose block must be",(0,i.jsx)(a.br,{}),"\n","validated by a core."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(a.h3,{id:"core-swap-execution-steps",children:"Core Swap Execution Steps"}),"\n",(0,i.jsx)(a.p,{children:"If you are a team with two parachains, one that has a lease with a fresh paraID, and an old one that\ndoesn't have a lease but contains the history of the chain then below is a list of steps to execute\nto swap these leases."}),"\n",(0,i.jsx)(a.p,{children:"Assumptions"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsx)(a.li,{children:"Your new paraID is unlocked and your old paraID is locked."}),"\n",(0,i.jsx)(a.li,{children:"You have access to the manager account on the relay chain for the new paraID"}),"\n",(0,i.jsx)(a.li,{children:"You have your collators running on your old paraID and you can execute upward XCM messages from\nthat parachain."}),"\n",(0,i.jsx)(a.li,{children:"The sovereign account for the locked paraID has enough available funds to execute transactions on\nthe relay chain."}),"\n",(0,i.jsx)(a.li,{children:"The account that owns the unlocked paraID has enough available funds to execute transactions on\nthe relay chain. transactions on the relay chain."}),"\n"]}),"\n",(0,i.jsx)(a.p,{children:"Steps"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsx)(a.li,{children:"Have the collator running for your original paraID."}),"\n",(0,i.jsxs)(a.li,{children:["Send the ",(0,i.jsx)(a.a,{href:"#initiate-swap-from-the-parachain",children:"XCM instruction detailed before"}),"."]}),"\n",(0,i.jsx)(a.li,{children:"Get a onDemandCore for your original paraID. Once this gets executed, your XCM message should be\ndispatched to the relay chain and you should see a pending swap."}),"\n",(0,i.jsxs)(a.li,{children:["Use the manager account on your new paraID to send the\n",(0,i.jsx)(a.a,{href:"#perform-swap-on-the-relay-chain-for-an-unlocked-parachain",children:"swap instruction"})," directly on the\nrelay chain."]}),"\n"]}),"\n",(0,i.jsx)(a.h3,{id:"coretime-swap---time-for-effect",children:"Coretime Swap - Time for Effect"}),"\n",(0,i.jsxs)(a.p,{children:["The swap of leases is effective immediately, however the Coretime chain communicates the changes of\nthese leases to the relay chain with every new coretime cycle. Thus, the change will come into\neffect in the following coretime cycle. For information on when the new coretime cycle, you can view\nthe ",(0,i.jsx)(a.a,{href:"https://coretime-polkadot.subscan.io/coretime_dashboard",children:"coretime sales"})," page."]})]})}function d(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},9621:(e,a,n)=>{n.d(a,{A:()=>t});const t=n.p+"assets/images/onDemand-block-production-ba682c530332d798721a8f87934bccfc.png"},65066:(e,a,n)=>{n.d(a,{A:()=>t});const t=n.p+"assets/images/tx-payment-api-weights-lease-swap-d1c125d22aa51ad58c980c890050d1e9.png"},28453:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>s});var t=n(96540);const i={},o=t.createContext(i);function r(e){const a=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:a},e.children)}}}]);